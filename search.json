[
  {
    "objectID": "Lab 2/model2.html",
    "href": "Lab 2/model2.html",
    "title": "Model",
    "section": "",
    "text": "Code\nfrom pandas import get_dummies\nimport numpy as np\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn import preprocessing"
  },
  {
    "objectID": "Lab 2/model2.html#get-data",
    "href": "Lab 2/model2.html#get-data",
    "title": "Model",
    "section": "Get Data",
    "text": "Get Data\n\n\nCode\n#import duckdb\n#from palmerpenguins import penguins\n#con = duckdb.connect('my-db.duckdb')\n#df = con.execute(\"SELECT * FROM penguins\").fetchdf().dropna()\n#con.close()\n\n#df.head(3)"
  },
  {
    "objectID": "Lab 2/model2.html#define-model-and-fit",
    "href": "Lab 2/model2.html#define-model-and-fit",
    "title": "Model",
    "section": "Define Model and Fit",
    "text": "Define Model and Fit\n\n\nCode\n#X = get_dummies(df[['bill_length_mm', 'species', 'sex']], drop_first = True)\n#y = df['body_mass_g']\n\n#model = LinearRegression().fit(X, y)"
  },
  {
    "objectID": "Lab 2/model2.html#get-some-information",
    "href": "Lab 2/model2.html#get-some-information",
    "title": "Model",
    "section": "Get some information",
    "text": "Get some information\n\n\nCode\n#print(f\"R^2 {model.score(X,y)}\")\n#print(f\"Intercept {model.intercept_}\")\n#print(f\"Columns {X.columns}\")\n#print(f\"Coefficients {model.coef_}\")"
  },
  {
    "objectID": "Lab 2/model2.html#turn-into-vetiver-model",
    "href": "Lab 2/model2.html#turn-into-vetiver-model",
    "title": "Model",
    "section": "Turn into Vetiver Model",
    "text": "Turn into Vetiver Model\n\n\nCode\n#from vetiver import VetiverModel\n#v = VetiverModel(model, model_name='penguin_model', prototype_data=X)"
  },
  {
    "objectID": "Lab 2/model2.html#save-to-board",
    "href": "Lab 2/model2.html#save-to-board",
    "title": "Model",
    "section": "Save to Board",
    "text": "Save to Board\n\n\nCode\n#from pins import board_folder\n#from vetiver import vetiver_pin_write\n\n#model_board = board_folder(\"/data/model\", allow_pickle_read = True)\n#vetiver_pin_write(model_board, v)"
  },
  {
    "objectID": "Lab 2/model2.html#turn-model-into-api",
    "href": "Lab 2/model2.html#turn-model-into-api",
    "title": "Model",
    "section": "Turn model into API",
    "text": "Turn model into API\n\n\nCode\n#from vetiver import VetiverAPI\n#app = VetiverAPI(v, check_prototype = True)"
  },
  {
    "objectID": "Lab 3/model3.html",
    "href": "Lab 3/model3.html",
    "title": "Model",
    "section": "",
    "text": "Code\nimport duckdb\nfrom pandas import get_dummies\nimport numpy as np\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn import preprocessing"
  },
  {
    "objectID": "Lab 3/model3.html#get-data",
    "href": "Lab 3/model3.html#get-data",
    "title": "Model",
    "section": "Get Data",
    "text": "Get Data\n\n\nCode\n#con = duckdb.connect('my-db.duckdb')\n#df = con.execute(\"SELECT * FROM penguins\").fetchdf().dropna()\n#con.close()\n\n#df.head(3)"
  },
  {
    "objectID": "Lab 3/model3.html#define-model-and-fit",
    "href": "Lab 3/model3.html#define-model-and-fit",
    "title": "Model",
    "section": "Define Model and Fit",
    "text": "Define Model and Fit\n\n\nCode\n#X = get_dummies(df[['bill_length_mm', 'species', 'sex']], drop_first = True)\n#y = df['body_mass_g']\n\n#model = LinearRegression().fit(X, y)"
  },
  {
    "objectID": "Lab 3/model3.html#get-some-information",
    "href": "Lab 3/model3.html#get-some-information",
    "title": "Model",
    "section": "Get some information",
    "text": "Get some information\n\n\nCode\n#print(f\"R^2 {model.score(X,y)}\")\n#print(f\"Intercept {model.intercept_}\")\n#print(f\"Columns {X.columns}\")\n#print(f\"Coefficients {model.coef_}\")"
  },
  {
    "objectID": "Lab 1/eda1.html",
    "href": "Lab 1/eda1.html",
    "title": "Penguins EDA",
    "section": "",
    "text": "Code\nlibrary(palmerpenguins)\nlibrary(dplyr)\n\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\n\nCode\nlibrary(ggplot2)\n\ndf &lt;- palmerpenguins::penguins\n\n\n\n\nCode\ndf %&gt;%\n  group_by(species, sex) %&gt;%\n  summarise(\n    across(\n      where(is.numeric), \n      \\(x) mean(x, na.rm = TRUE)\n      )\n    ) %&gt;%\n  knitr::kable()\n\n\n`summarise()` has grouped output by 'species'. You can override using the\n`.groups` argument.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nspecies\nsex\nbill_length_mm\nbill_depth_mm\nflipper_length_mm\nbody_mass_g\nyear\n\n\n\n\nAdelie\nfemale\n37.25753\n17.62192\n187.7945\n3368.836\n2008.055\n\n\nAdelie\nmale\n40.39041\n19.07260\n192.4110\n4043.493\n2008.055\n\n\nAdelie\nNA\n37.84000\n18.32000\n185.6000\n3540.000\n2007.000\n\n\nChinstrap\nfemale\n46.57353\n17.58824\n191.7353\n3527.206\n2007.971\n\n\nChinstrap\nmale\n51.09412\n19.25294\n199.9118\n3938.971\n2007.971\n\n\nGentoo\nfemale\n45.56379\n14.23793\n212.7069\n4679.741\n2008.069\n\n\nGentoo\nmale\n49.47377\n15.71803\n221.5410\n5484.836\n2008.066\n\n\nGentoo\nNA\n45.62500\n14.55000\n215.7500\n4587.500\n2008.400"
  },
  {
    "objectID": "Lab 1/eda1.html#penguin-size-and-mass-by-sex-and-species",
    "href": "Lab 1/eda1.html#penguin-size-and-mass-by-sex-and-species",
    "title": "Penguins EDA",
    "section": "",
    "text": "Code\nlibrary(palmerpenguins)\nlibrary(dplyr)\n\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\n\nCode\nlibrary(ggplot2)\n\ndf &lt;- palmerpenguins::penguins\n\n\n\n\nCode\ndf %&gt;%\n  group_by(species, sex) %&gt;%\n  summarise(\n    across(\n      where(is.numeric), \n      \\(x) mean(x, na.rm = TRUE)\n      )\n    ) %&gt;%\n  knitr::kable()\n\n\n`summarise()` has grouped output by 'species'. You can override using the\n`.groups` argument.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nspecies\nsex\nbill_length_mm\nbill_depth_mm\nflipper_length_mm\nbody_mass_g\nyear\n\n\n\n\nAdelie\nfemale\n37.25753\n17.62192\n187.7945\n3368.836\n2008.055\n\n\nAdelie\nmale\n40.39041\n19.07260\n192.4110\n4043.493\n2008.055\n\n\nAdelie\nNA\n37.84000\n18.32000\n185.6000\n3540.000\n2007.000\n\n\nChinstrap\nfemale\n46.57353\n17.58824\n191.7353\n3527.206\n2007.971\n\n\nChinstrap\nmale\n51.09412\n19.25294\n199.9118\n3938.971\n2007.971\n\n\nGentoo\nfemale\n45.56379\n14.23793\n212.7069\n4679.741\n2008.069\n\n\nGentoo\nmale\n49.47377\n15.71803\n221.5410\n5484.836\n2008.066\n\n\nGentoo\nNA\n45.62500\n14.55000\n215.7500\n4587.500\n2008.400"
  },
  {
    "objectID": "Lab 1/eda1.html#penguin-size-vs-mass-by-species",
    "href": "Lab 1/eda1.html#penguin-size-vs-mass-by-species",
    "title": "Penguins EDA",
    "section": "Penguin Size vs Mass by Species",
    "text": "Penguin Size vs Mass by Species\n\n\nCode\ndf %&gt;%\n  ggplot(aes(x = bill_length_mm, y = body_mass_g, color = species)) +\n  geom_point() + \n  geom_smooth(method = \"lm\")\n\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\nWarning: Removed 2 rows containing non-finite values (`stat_smooth()`).\n\n\nWarning: Removed 2 rows containing missing values (`geom_point()`)."
  },
  {
    "objectID": "Lab 1/eda1.html#penguin-bill-vs-flipper-length-by-species",
    "href": "Lab 1/eda1.html#penguin-bill-vs-flipper-length-by-species",
    "title": "Penguins EDA",
    "section": "Penguin Bill vs Flipper Length by Species",
    "text": "Penguin Bill vs Flipper Length by Species\n\n\nCode\ndf %&gt;%\n  ggplot(aes(x = bill_length_mm, y = flipper_length_mm, color = species)) +\n  geom_point() + \n  geom_smooth(method = \"lm\")\n\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\nWarning: Removed 2 rows containing non-finite values (`stat_smooth()`).\n\n\nWarning: Removed 2 rows containing missing values (`geom_point()`)."
  },
  {
    "objectID": "Lab 1/eda1.html#penguin-flipper-length-vs-mass-by-species",
    "href": "Lab 1/eda1.html#penguin-flipper-length-vs-mass-by-species",
    "title": "Penguins EDA",
    "section": "Penguin Flipper Length vs Mass by Species",
    "text": "Penguin Flipper Length vs Mass by Species\n\n\nCode\ndf %&gt;%\n  ggplot(aes(x = flipper_length_mm, y = body_mass_g, color = species)) +\n  geom_point() + \n  geom_smooth(method = \"lm\")\n\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\nWarning: Removed 2 rows containing non-finite values (`stat_smooth()`).\n\n\nWarning: Removed 2 rows containing missing values (`geom_point()`)."
  },
  {
    "objectID": "Lab 1/eda1.html#penguin-size-vs-mass-by-year",
    "href": "Lab 1/eda1.html#penguin-size-vs-mass-by-year",
    "title": "Penguins EDA",
    "section": "Penguin Size vs Mass by Year",
    "text": "Penguin Size vs Mass by Year\n\n\nCode\ndf %&gt;%\n  ggplot(aes(x = bill_length_mm, y = body_mass_g, color = year)) +\n  geom_point() + \n  geom_smooth(method = \"lm\")\n\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\nWarning: Removed 2 rows containing non-finite values (`stat_smooth()`).\n\n\nWarning: The following aesthetics were dropped during statistical transformation: colour\nℹ This can happen when ggplot fails to infer the correct grouping structure in\n  the data.\nℹ Did you forget to specify a `group` aesthetic or to convert a numerical\n  variable into a factor?\n\n\nWarning: Removed 2 rows containing missing values (`geom_point()`)."
  },
  {
    "objectID": "Lab 1/eda1.html#penguin-year-vs-mass-by-species",
    "href": "Lab 1/eda1.html#penguin-year-vs-mass-by-species",
    "title": "Penguins EDA",
    "section": "Penguin Year vs Mass by Species",
    "text": "Penguin Year vs Mass by Species\n\n\nCode\ndf %&gt;%\n  ggplot(aes(x = year, y = body_mass_g, color = species)) +\n  geom_point() \n\n\nWarning: Removed 2 rows containing missing values (`geom_point()`)."
  },
  {
    "objectID": "Lab 1/eda1.html#penguin-year-vs-size-by-species",
    "href": "Lab 1/eda1.html#penguin-year-vs-size-by-species",
    "title": "Penguins EDA",
    "section": "Penguin Year vs Size by Species",
    "text": "Penguin Year vs Size by Species\n\n\nCode\ndf %&gt;%\n  ggplot(aes(x = year, y = bill_length_mm, color = species)) +\n  geom_point() \n\n\nWarning: Removed 2 rows containing missing values (`geom_point()`)."
  },
  {
    "objectID": "Lab 1/model1.html",
    "href": "Lab 1/model1.html",
    "title": "Model",
    "section": "",
    "text": "Code\nfrom palmerpenguins import penguins\nfrom pandas import get_dummies\nimport numpy as np\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn import preprocessing"
  },
  {
    "objectID": "Lab 1/model1.html#get-data",
    "href": "Lab 1/model1.html#get-data",
    "title": "Model",
    "section": "Get Data",
    "text": "Get Data\n\n\nCode\ndf = penguins.load_penguins().dropna()\ndf.head(3)\n\n\n\n\n\n\n\n\n\n\nspecies\nisland\nbill_length_mm\nbill_depth_mm\nflipper_length_mm\nbody_mass_g\nsex\nyear\n\n\n\n\n0\nAdelie\nTorgersen\n39.1\n18.7\n181.0\n3750.0\nmale\n2007\n\n\n1\nAdelie\nTorgersen\n39.5\n17.4\n186.0\n3800.0\nfemale\n2007\n\n\n2\nAdelie\nTorgersen\n40.3\n18.0\n195.0\n3250.0\nfemale\n2007"
  },
  {
    "objectID": "Lab 1/model1.html#define-model-and-fit",
    "href": "Lab 1/model1.html#define-model-and-fit",
    "title": "Model",
    "section": "Define Model and Fit",
    "text": "Define Model and Fit\n\n\nCode\nX = get_dummies(df[['bill_length_mm', 'species', 'sex']], drop_first = True)\ny = df['body_mass_g']\n\nmodel = LinearRegression().fit(X, y)"
  },
  {
    "objectID": "Lab 1/model1.html#get-some-information",
    "href": "Lab 1/model1.html#get-some-information",
    "title": "Model",
    "section": "Get some information",
    "text": "Get some information\n\n\nCode\nprint(f\"R^2 {model.score(X,y)}\")\nprint(f\"Intercept {model.intercept_}\")\nprint(f\"Columns {X.columns}\")\nprint(f\"Coefficients {model.coef_}\")\n\n\nR^2 0.8555368759537614\nIntercept 2169.2697209393996\nColumns Index(['bill_length_mm', 'species_Chinstrap', 'species_Gentoo', 'sex_male'], dtype='object')\nCoefficients [  32.53688677 -298.76553447 1094.86739145  547.36692408]\n\n\n\n\nCode\nfrom vetiver import VetiverModel\nv = VetiverModel(model, model_name='penguin_model', prototype_data=X)"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Welcome",
    "section": "",
    "text": "Welcome\nOn this website, you will see pages that reflect the labs for Chapters 1-6 from “DevOps for Data Science” by Alex Gold. Please note, you will only see the code for Chapter 1 due to technical errors with R and Python code. You can see my files and work in my GitHub folders where everything is commented out as I did all the work and then the code stopped working."
  },
  {
    "objectID": "Lab 3/eda3.html",
    "href": "Lab 3/eda3.html",
    "title": "Penguins EDA",
    "section": "",
    "text": "Code\n# library(dplyr)\n# library(ggplot2)\n# library(dbplyr)\n# \n# con &lt;- DBI::dbConnect(\n#   duckdb::duckdb(), \n#   dbdir = \"my-db.duckdb\"\n#   )\n# df &lt;- dplyr::tbl(con, \"penguins\")\n\n\n\n\nCode\n# df %&gt;%\n#   group_by(species, sex) %&gt;%\n#   summarise(\n#     across(\n#         ends_with(\"mm\") | ends_with(\"g\"),\n#       \\(x) mean(x, na.rm = TRUE)\n#       )\n#     ) %&gt;%\n#   dplyr::collect() %&gt;%\n#   knitr::kable()"
  },
  {
    "objectID": "Lab 3/eda3.html#penguin-size-and-mass-by-sex-and-species",
    "href": "Lab 3/eda3.html#penguin-size-and-mass-by-sex-and-species",
    "title": "Penguins EDA",
    "section": "",
    "text": "Code\n# library(dplyr)\n# library(ggplot2)\n# library(dbplyr)\n# \n# con &lt;- DBI::dbConnect(\n#   duckdb::duckdb(), \n#   dbdir = \"my-db.duckdb\"\n#   )\n# df &lt;- dplyr::tbl(con, \"penguins\")\n\n\n\n\nCode\n# df %&gt;%\n#   group_by(species, sex) %&gt;%\n#   summarise(\n#     across(\n#         ends_with(\"mm\") | ends_with(\"g\"),\n#       \\(x) mean(x, na.rm = TRUE)\n#       )\n#     ) %&gt;%\n#   dplyr::collect() %&gt;%\n#   knitr::kable()"
  },
  {
    "objectID": "Lab 3/eda3.html#penguin-size-vs-mass-by-species",
    "href": "Lab 3/eda3.html#penguin-size-vs-mass-by-species",
    "title": "Penguins EDA",
    "section": "Penguin Size vs Mass by Species",
    "text": "Penguin Size vs Mass by Species\n\n\nCode\n# df %&gt;%\n#   ggplot(aes(x = bill_length_mm, y = body_mass_g, color = species)) +\n#   geom_point() + \n#   geom_smooth(method = \"lm\")\n\n\n\n\nCode\n# DBI::dbDisconnect(con)"
  }
]