{
    "type": [
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        2,
        2,
        2,
        2,
        0,
        1,
        2,
        0,
        1,
        2
    ],
    "data": [
        "+ ",
        "  ",
        "+ ",
        "    # read version",
        "+ ",
        "    version <- \"unknown\"",
        "+ ",
        "    for (field in c(\"UBUNTU_CODENAME\", \"VERSION_CODENAME\", \"VERSION_ID\", \"BUILD_ID\")) {",
        "+ ",
        "      if (field %in% names(vars) && nzchar(vars[[field]])) {",
        "+ ",
        "        version <- vars[[field]]",
        "+ ",
        "        break",
        "+ ",
        "      }",
        "+ ",
        "    }",
        "+ ",
        "  ",
        "+ ",
        "    # join together",
        "+ ",
        "    paste(c(os, id, version), collapse = \"-\")",
        "+ ",
        "  ",
        "+ ",
        "  }",
        "+ ",
        "  ",
        "+ ",
        "  renv_bootstrap_platform_os_via_redhat_release <- function() {",
        "+ ",
        "  ",
        "+ ",
        "    # read /etc/redhat-release",
        "+ ",
        "    contents <- readLines(\"/etc/redhat-release\", warn = FALSE)",
        "+ ",
        "  ",
        "+ ",
        "    # infer id",
        "+ ",
        "    id <- if (grepl(\"centos\", contents, ignore.case = TRUE))",
        "+ ",
        "      \"centos\"",
        "+ ",
        "    else if (grepl(\"redhat\", contents, ignore.case = TRUE))",
        "+ ",
        "      \"redhat\"",
        "+ ",
        "    else",
        "+ ",
        "      \"unknown\"",
        "+ ",
        "  ",
        "+ ",
        "    # try to find a version component (very hacky)",
        "+ ",
        "    version <- \"unknown\"",
        "+ ",
        "  ",
        "+ ",
        "    parts <- strsplit(contents, \"[[:space:]]\")[[1L]]",
        "+ ",
        "    for (part in parts) {",
        "+ ",
        "  ",
        "+ ",
        "      nv <- tryCatch(numeric_version(part), error = identity)",
        "+ ",
        "      if (inherits(nv, \"error\"))",
        "+ ",
        "        next",
        "+ ",
        "  ",
        "+ ",
        "      version <- nv[1, 1]",
        "+ ",
        "      break",
        "+ ",
        "  ",
        "+ ",
        "    }",
        "+ ",
        "  ",
        "+ ",
        "    paste(c(\"linux\", id, version), collapse = \"-\")",
        "+ ",
        "  ",
        "+ ",
        "  }",
        "+ ",
        "  ",
        "+ ",
        "  renv_bootstrap_library_root_name <- function(project) {",
        "+ ",
        "  ",
        "+ ",
        "    # use project name as-is if requested",
        "+ ",
        "    asis <- Sys.getenv(\"RENV_PATHS_LIBRARY_ROOT_ASIS\", unset = \"FALSE\")",
        "+ ",
        "    if (asis)",
        "+ ",
        "      return(basename(project))",
        "+ ",
        "  ",
        "+ ",
        "    # otherwise, disambiguate based on project's path",
        "+ ",
        "    id <- substring(renv_bootstrap_hash_text(project), 1L, 8L)",
        "+ ",
        "    paste(basename(project), id, sep = \"-\")",
        "+ ",
        "  ",
        "+ ",
        "  }",
        "+ ",
        "  ",
        "+ ",
        "  renv_bootstrap_library_root <- function(project) {",
        "+ ",
        "  ",
        "+ ",
        "    prefix <- renv_bootstrap_profile_prefix()",
        "+ ",
        "  ",
        "+ ",
        "    path <- Sys.getenv(\"RENV_PATHS_LIBRARY\", unset = NA)",
        "+ ",
        "    if (!is.na(path))",
        "+ ",
        "      return(paste(c(path, prefix), collapse = \"/\"))",
        "+ ",
        "  ",
        "+ ",
        "    path <- renv_bootstrap_library_root_impl(project)",
        "+ ",
        "    if (!is.null(path)) {",
        "+ ",
        "      name <- renv_bootstrap_library_root_name(project)",
        "+ ",
        "      return(paste(c(path, prefix, name), collapse = \"/\"))",
        "+ ",
        "    }",
        "+ ",
        "  ",
        "+ ",
        "    renv_bootstrap_paths_renv(\"library\", project = project)",
        "+ ",
        "  ",
        "+ ",
        "  }",
        "+ ",
        "  ",
        "+ ",
        "  renv_bootstrap_library_root_impl <- function(project) {",
        "+ ",
        "  ",
        "+ ",
        "    root <- Sys.getenv(\"RENV_PATHS_LIBRARY_ROOT\", unset = NA)",
        "+ ",
        "    if (!is.na(root))",
        "+ ",
        "      return(root)",
        "+ ",
        "  ",
        "+ ",
        "    type <- renv_bootstrap_project_type(project)",
        "+ ",
        "    if (identical(type, \"package\")) {",
        "+ ",
        "      userdir <- renv_bootstrap_user_dir()",
        "+ ",
        "      return(file.path(userdir, \"library\"))",
        "+ ",
        "    }",
        "+ ",
        "  ",
        "+ ",
        "  }",
        "+ ",
        "  ",
        "+ ",
        "  renv_bootstrap_validate_version <- function(version, description = NULL) {",
        "+ ",
        "  ",
        "+ ",
        "    # resolve description file",
        "+ ",
        "    #",
        "+ ",
        "    # avoid passing lib.loc to `packageDescription()` below, since R will",
        "+ ",
        "    # use the loaded version of the package by default anyhow. note that",
        "+ ",
        "    # this function should only be called after 'renv' is loaded",
        "+ ",
        "    # https://github.com/rstudio/renv/issues/1625",
        "+ ",
        "    description <- description %||% packageDescription(\"renv\")",
        "+ ",
        "  ",
        "+ ",
        "    # check whether requested version 'version' matches loaded version of renv",
        "+ ",
        "    sha <- attr(version, \"sha\", exact = TRUE)",
        "+ ",
        "    valid <- if (!is.null(sha))",
        "+ ",
        "      renv_bootstrap_validate_version_dev(sha, description)",
        "+ ",
        "    else",
        "+ ",
        "      renv_bootstrap_validate_version_release(version, description)",
        "+ ",
        "  ",
        "+ ",
        "    if (valid)",
        "+ ",
        "      return(TRUE)",
        "+ ",
        "  ",
        "+ ",
        "    # the loaded version of renv doesn't match the requested version;",
        "+ ",
        "    # give the user instructions on how to proceed",
        "+ ",
        "    remote <- if (!is.null(description[[\"RemoteSha\"]])) {",
        "+ ",
        "      paste(\"rstudio/renv\", description[[\"RemoteSha\"]], sep = \"@\")",
        "+ ",
        "    } else {",
        "+ ",
        "      paste(\"renv\", description[[\"Version\"]], sep = \"@\")",
        "+ ",
        "    }",
        "+ ",
        "  ",
        "+ ",
        "    # display both loaded version + sha if available",
        "+ ",
        "    friendly <- renv_bootstrap_version_friendly(",
        "+ ",
        "      version = description[[\"Version\"]],",
        "+ ",
        "      sha     = description[[\"RemoteSha\"]]",
        "+ ",
        "    )",
        "+ ",
        "  ",
        "+ ",
        "    fmt <- paste(",
        "+ ",
        "      \"renv %1$s was loaded from project library, but this project is configured to use renv %2$s.\",",
        "+ ",
        "      \"- Use `renv::record(\\\"%3$s\\\")` to record renv %1$s in the lockfile.\",",
        "+ ",
        "      \"- Use `renv::restore(packages = \\\"renv\\\")` to install renv %2$s into the project library.\",",
        "+ ",
        "      sep = \"\\n\"",
        "+ ",
        "    )",
        "+ ",
        "    catf(fmt, friendly, renv_bootstrap_version_friendly(version), remote)",
        "+ ",
        "  ",
        "+ ",
        "    FALSE",
        "+ ",
        "  ",
        "+ ",
        "  }",
        "+ ",
        "  ",
        "+ ",
        "  renv_bootstrap_validate_version_dev <- function(version, description) {",
        "+ ",
        "    expected <- description[[\"RemoteSha\"]]",
        "+ ",
        "    is.character(expected) && startswith(expected, version)",
        "+ ",
        "  }",
        "+ ",
        "  ",
        "+ ",
        "  renv_bootstrap_validate_version_release <- function(version, description) {",
        "+ ",
        "    expected <- description[[\"Version\"]]",
        "+ ",
        "    is.character(expected) && identical(expected, version)",
        "+ ",
        "  }",
        "+ ",
        "  ",
        "+ ",
        "  renv_bootstrap_hash_text <- function(text) {",
        "+ ",
        "  ",
        "+ ",
        "    hashfile <- tempfile(\"renv-hash-\")",
        "+ ",
        "    on.exit(unlink(hashfile), add = TRUE)",
        "+ ",
        "  ",
        "+ ",
        "    writeLines(text, con = hashfile)",
        "+ ",
        "    tools::md5sum(hashfile)",
        "+ ",
        "  ",
        "+ ",
        "  }",
        "+ ",
        "  ",
        "+ ",
        "  renv_bootstrap_load <- function(project, libpath, version) {",
        "+ ",
        "  ",
        "+ ",
        "    # try to load renv from the project library",
        "+ ",
        "    if (!requireNamespace(\"renv\", lib.loc = libpath, quietly = TRUE))",
        "+ ",
        "      return(FALSE)",
        "+ ",
        "  ",
        "+ ",
        "    # warn if the version of renv loaded does not match",
        "+ ",
        "    renv_bootstrap_validate_version(version)",
        "+ ",
        "  ",
        "+ ",
        "    # execute renv load hooks, if any",
        "+ ",
        "    hooks <- getHook(\"renv::autoload\")",
        "+ ",
        "    for (hook in hooks)",
        "+ ",
        "      if (is.function(hook))",
        "+ ",
        "        tryCatch(hook(), error = warnify)",
        "+ ",
        "  ",
        "+ ",
        "    # load the project",
        "+ ",
        "    renv::load(project)",
        "+ ",
        "  ",
        "+ ",
        "    TRUE",
        "+ ",
        "  ",
        "+ ",
        "  }",
        "+ ",
        "  ",
        "+ ",
        "  renv_bootstrap_profile_load <- function(project) {",
        "+ ",
        "  ",
        "+ ",
        "    # if RENV_PROFILE is already set, just use that",
        "+ ",
        "    profile <- Sys.getenv(\"RENV_PROFILE\", unset = NA)",
        "+ ",
        "    if (!is.na(profile) && nzchar(profile))",
        "+ ",
        "      return(profile)",
        "+ ",
        "  ",
        "+ ",
        "    # check for a profile file (nothing to do if it doesn't exist)",
        "+ ",
        "    path <- renv_bootstrap_paths_renv(\"profile\", profile = FALSE, project = project)",
        "+ ",
        "    if (!file.exists(path))",
        "+ ",
        "      return(NULL)",
        "+ ",
        "  ",
        "+ ",
        "    # read the profile, and set it if it exists",
        "+ ",
        "    contents <- readLines(path, warn = FALSE)",
        "+ ",
        "    if (length(contents) == 0L)",
        "+ ",
        "      return(NULL)",
        "+ ",
        "  ",
        "+ ",
        "    # set RENV_PROFILE",
        "+ ",
        "    profile <- contents[[1L]]",
        "+ ",
        "    if (!profile %in% c(\"\", \"default\"))",
        "+ ",
        "      Sys.setenv(RENV_PROFILE = profile)",
        "+ ",
        "  ",
        "+ ",
        "    profile",
        "+ ",
        "  ",
        "+ ",
        "  }",
        "+ ",
        "  ",
        "+ ",
        "  renv_bootstrap_profile_prefix <- function() {",
        "+ ",
        "    profile <- renv_bootstrap_profile_get()",
        "+ ",
        "    if (!is.null(profile))",
        "+ ",
        "      return(file.path(\"profiles\", profile, \"renv\"))",
        "+ ",
        "  }",
        "+ ",
        "  ",
        "+ ",
        "  renv_bootstrap_profile_get <- function() {",
        "+ ",
        "    profile <- Sys.getenv(\"RENV_PROFILE\", unset = \"\")",
        "+ ",
        "    renv_bootstrap_profile_normalize(profile)",
        "+ ",
        "  }",
        "+ ",
        "  ",
        "+ ",
        "  renv_bootstrap_profile_set <- function(profile) {",
        "+ ",
        "    profile <- renv_bootstrap_profile_normalize(profile)",
        "+ ",
        "    if (is.null(profile))",
        "+ ",
        "      Sys.unsetenv(\"RENV_PROFILE\")",
        "+ ",
        "    else",
        "+ ",
        "      Sys.setenv(RENV_PROFILE = profile)",
        "+ ",
        "  }",
        "+ ",
        "  ",
        "+ ",
        "  renv_bootstrap_profile_normalize <- function(profile) {",
        "+ ",
        "  ",
        "+ ",
        "    if (is.null(profile) || profile %in% c(\"\", \"default\"))",
        "+ ",
        "      return(NULL)",
        "+ ",
        "  ",
        "+ ",
        "    profile",
        "+ ",
        "  ",
        "+ ",
        "  }",
        "+ ",
        "  ",
        "+ ",
        "  renv_bootstrap_path_absolute <- function(path) {",
        "+ ",
        "  ",
        "+ ",
        "    substr(path, 1L, 1L) %in% c(\"~\", \"/\", \"\\\\\") || (",
        "+ ",
        "      substr(path, 1L, 1L) %in% c(letters, LETTERS) &&",
        "+ ",
        "      substr(path, 2L, 3L) %in% c(\":/\", \":\\\\\")",
        "+ ",
        "    )",
        "+ ",
        "  ",
        "+ ",
        "  }",
        "+ ",
        "  ",
        "+ ",
        "  renv_bootstrap_paths_renv <- function(..., profile = TRUE, project = NULL) {",
        "+ ",
        "    renv <- Sys.getenv(\"RENV_PATHS_RENV\", unset = \"renv\")",
        "+ ",
        "    root <- if (renv_bootstrap_path_absolute(renv)) NULL else project",
        "+ ",
        "    prefix <- if (profile) renv_bootstrap_profile_prefix()",
        "+ ",
        "    components <- c(root, renv, prefix, ...)",
        "+ ",
        "    paste(components, collapse = \"/\")",
        "+ ",
        "  }",
        "+ ",
        "  ",
        "+ ",
        "  renv_bootstrap_project_type <- function(path) {",
        "+ ",
        "  ",
        "+ ",
        "    descpath <- file.path(path, \"DESCRIPTION\")",
        "+ ",
        "    if (!file.exists(descpath))",
        "+ ",
        "      return(\"unknown\")",
        "+ ",
        "  ",
        "+ ",
        "    desc <- tryCatch(",
        "+ ",
        "      read.dcf(descpath, all = TRUE),",
        "+ ",
        "      error = identity",
        "+ ",
        "    )",
        "+ ",
        "  ",
        "+ ",
        "    if (inherits(desc, \"error\"))",
        "+ ",
        "      return(\"unknown\")",
        "+ ",
        "  ",
        "+ ",
        "    type <- desc$Type",
        "+ ",
        "    if (!is.null(type))",
        "+ ",
        "      return(tolower(type))",
        "+ ",
        "  ",
        "+ ",
        "    package <- desc$Package",
        "+ ",
        "    if (!is.null(package))",
        "+ ",
        "      return(\"package\")",
        "+ ",
        "  ",
        "+ ",
        "    \"unknown\"",
        "+ ",
        "  ",
        "+ ",
        "  }",
        "+ ",
        "  ",
        "+ ",
        "  renv_bootstrap_user_dir <- function() {",
        "+ ",
        "    dir <- renv_bootstrap_user_dir_impl()",
        "+ ",
        "    path.expand(chartr(\"\\\\\", \"/\", dir))",
        "+ ",
        "  }",
        "+ ",
        "  ",
        "+ ",
        "  renv_bootstrap_user_dir_impl <- function() {",
        "+ ",
        "  ",
        "+ ",
        "    # use local override if set",
        "+ ",
        "    override <- getOption(\"renv.userdir.override\")",
        "+ ",
        "    if (!is.null(override))",
        "+ ",
        "      return(override)",
        "+ ",
        "  ",
        "+ ",
        "    # use R_user_dir if available",
        "+ ",
        "    tools <- asNamespace(\"tools\")",
        "+ ",
        "    if (is.function(tools$R_user_dir))",
        "+ ",
        "      return(tools$R_user_dir(\"renv\", \"cache\"))",
        "+ ",
        "  ",
        "+ ",
        "    # try using our own backfill for older versions of R",
        "+ ",
        "    envvars <- c(\"R_USER_CACHE_DIR\", \"XDG_CACHE_HOME\")",
        "+ ",
        "    for (envvar in envvars) {",
        "+ ",
        "      root <- Sys.getenv(envvar, unset = NA)",
        "+ ",
        "      if (!is.na(root))",
        "+ ",
        "        return(file.path(root, \"R/renv\"))",
        "+ ",
        "    }",
        "+ ",
        "  ",
        "+ ",
        "    # use platform-specific default fallbacks",
        "+ ",
        "    if (Sys.info()[[\"sysname\"]] == \"Windows\")",
        "+ ",
        "      file.path(Sys.getenv(\"LOCALAPPDATA\"), \"R/cache/R/renv\")",
        "+ ",
        "    else if (Sys.info()[[\"sysname\"]] == \"Darwin\")",
        "+ ",
        "      \"~/Library/Caches/org.R-project.R/R/renv\"",
        "+ ",
        "    else",
        "+ ",
        "      \"~/.cache/R/renv\"",
        "+ ",
        "  ",
        "+ ",
        "  }",
        "+ ",
        "  ",
        "+ ",
        "  renv_bootstrap_version_friendly <- function(version, shafmt = NULL, sha = NULL) {",
        "+ ",
        "    sha <- sha %||% attr(version, \"sha\", exact = TRUE)",
        "+ ",
        "    parts <- c(version, sprintf(shafmt %||% \" [sha: %s]\", substring(sha, 1L, 7L)))",
        "+ ",
        "    paste(parts, collapse = \"\")",
        "+ ",
        "  }",
        "+ ",
        "  ",
        "+ ",
        "  renv_bootstrap_exec <- function(project, libpath, version) {",
        "+ ",
        "    if (!renv_bootstrap_load(project, libpath, version))",
        "+ ",
        "      renv_bootstrap_run(version, libpath)",
        "+ ",
        "  }",
        "+ ",
        "  ",
        "+ ",
        "  renv_bootstrap_run <- function(version, libpath) {",
        "+ ",
        "  ",
        "+ ",
        "    # perform bootstrap",
        "+ ",
        "    bootstrap(version, libpath)",
        "+ ",
        "  ",
        "+ ",
        "    # exit early if we're just testing bootstrap",
        "+ ",
        "    if (!is.na(Sys.getenv(\"RENV_BOOTSTRAP_INSTALL_ONLY\", unset = NA)))",
        "+ ",
        "      return(TRUE)",
        "+ ",
        "  ",
        "+ ",
        "    # try again to load",
        "+ ",
        "    if (requireNamespace(\"renv\", lib.loc = libpath, quietly = TRUE)) {",
        "+ ",
        "      return(renv::load(project = getwd()))",
        "+ ",
        "    }",
        "+ ",
        "  ",
        "+ ",
        "    # failed to download or load renv; warn the user",
        "+ ",
        "    msg <- c(",
        "+ ",
        "      \"Failed to find an renv installation: the project will not be loaded.\",",
        "+ ",
        "      \"Use `renv::activate()` to re-initialize the project.\"",
        "+ ",
        "    )",
        "+ ",
        "  ",
        "+ ",
        "    warning(paste(msg, collapse = \"\\n\"), call. = FALSE)",
        "+ ",
        "  ",
        "+ ",
        "  }",
        "+ ",
        "  ",
        "+ ",
        "  renv_json_read <- function(file = NULL, text = NULL) {",
        "+ ",
        "  ",
        "+ ",
        "    jlerr <- NULL",
        "+ ",
        "  ",
        "+ ",
        "    # if jsonlite is loaded, use that instead",
        "+ ",
        "    if (\"jsonlite\" %in% loadedNamespaces()) {",
        "+ ",
        "  ",
        "+ ",
        "      json <- tryCatch(renv_json_read_jsonlite(file, text), error = identity)",
        "+ ",
        "      if (!inherits(json, \"error\"))",
        "+ ",
        "        return(json)",
        "+ ",
        "  ",
        "+ ",
        "      jlerr <- json",
        "+ ",
        "  ",
        "+ ",
        "    }",
        "+ ",
        "  ",
        "+ ",
        "    # otherwise, fall back to the default JSON reader",
        "+ ",
        "    json <- tryCatch(renv_json_read_default(file, text), error = identity)",
        "+ ",
        "    if (!inherits(json, \"error\"))",
        "+ ",
        "      return(json)",
        "+ ",
        "  ",
        "+ ",
        "    # report an error",
        "+ ",
        "    if (!is.null(jlerr))",
        "+ ",
        "      stop(jlerr)",
        "+ ",
        "    else",
        "+ ",
        "      stop(json)",
        "+ ",
        "  ",
        "+ ",
        "  }",
        "+ ",
        "  ",
        "+ ",
        "  renv_json_read_jsonlite <- function(file = NULL, text = NULL) {",
        "+ ",
        "    text <- paste(text %||% readLines(file, warn = FALSE), collapse = \"\\n\")",
        "+ ",
        "    jsonlite::fromJSON(txt = text, simplifyVector = FALSE)",
        "+ ",
        "  }",
        "+ ",
        "  ",
        "+ ",
        "  renv_json_read_default <- function(file = NULL, text = NULL) {",
        "+ ",
        "  ",
        "+ ",
        "    # find strings in the JSON",
        "+ ",
        "    text <- paste(text %||% readLines(file, warn = FALSE), collapse = \"\\n\")",
        "+ ",
        "    pattern <- '[\"](?:(?:\\\\\\\\.)|(?:[^\"\\\\\\\\]))*?[\"]'",
        "+ ",
        "    locs <- gregexpr(pattern, text, perl = TRUE)[[1]]",
        "+ ",
        "  ",
        "+ ",
        "    # if any are found, replace them with placeholders",
        "+ ",
        "    replaced <- text",
        "+ ",
        "    strings <- character()",
        "+ ",
        "    replacements <- character()",
        "+ ",
        "  ",
        "+ ",
        "    if (!identical(c(locs), -1L)) {",
        "+ ",
        "  ",
        "+ ",
        "      # get the string values",
        "+ ",
        "      starts <- locs",
        "+ ",
        "      ends <- locs + attr(locs, \"match.length\") - 1L",
        "+ ",
        "      strings <- substring(text, starts, ends)",
        "+ ",
        "  ",
        "+ ",
        "      # only keep those requiring escaping",
        "+ ",
        "      strings <- grep(\"[[\\\\]{}:]\", strings, perl = TRUE, value = TRUE)",
        "+ ",
        "  ",
        "+ ",
        "      # compute replacements",
        "+ ",
        "      replacements <- sprintf('\"\\032%i\\032\"', seq_along(strings))",
        "+ ",
        "  ",
        "+ ",
        "      # replace the strings",
        "+ ",
        "      mapply(function(string, replacement) {",
        "+ ",
        "        replaced <<- sub(string, replacement, replaced, fixed = TRUE)",
        "+ ",
        "      }, strings, replacements)",
        "+ ",
        "  ",
        "+ ",
        "    }",
        "+ ",
        "  ",
        "+ ",
        "    # transform the JSON into something the R parser understands",
        "+ ",
        "    transformed <- replaced",
        "+ ",
        "    transformed <- gsub(\"{}\", \"`names<-`(list(), character())\", transformed, fixed = TRUE)",
        "+ ",
        "    transformed <- gsub(\"[[{]\", \"list(\", transformed, perl = TRUE)",
        "+ ",
        "    transformed <- gsub(\"[]}]\", \")\", transformed, perl = TRUE)",
        "+ ",
        "    transformed <- gsub(\":\", \"=\", transformed, fixed = TRUE)",
        "+ ",
        "    text <- paste(transformed, collapse = \"\\n\")",
        "+ ",
        "  ",
        "+ ",
        "    # parse it",
        "+ ",
        "    json <- parse(text = text, keep.source = FALSE, srcfile = NULL)[[1L]]",
        "+ ",
        "  ",
        "+ ",
        "    # construct map between source strings, replaced strings",
        "+ ",
        "    map <- as.character(parse(text = strings))",
        "+ ",
        "    names(map) <- as.character(parse(text = replacements))",
        "+ ",
        "  ",
        "+ ",
        "    # convert to list",
        "+ ",
        "    map <- as.list(map)",
        "+ ",
        "  ",
        "+ ",
        "    # remap strings in object",
        "+ ",
        "    remapped <- renv_json_read_remap(json, map)",
        "+ ",
        "  ",
        "+ ",
        "    # evaluate",
        "+ ",
        "    eval(remapped, envir = baseenv())",
        "+ ",
        "  ",
        "+ ",
        "  }",
        "+ ",
        "  ",
        "+ ",
        "  renv_json_read_remap <- function(json, map) {",
        "+ ",
        "  ",
        "+ ",
        "    # fix names",
        "+ ",
        "    if (!is.null(names(json))) {",
        "+ ",
        "      lhs <- match(names(json), names(map), nomatch = 0L)",
        "+ ",
        "      rhs <- match(names(map), names(json), nomatch = 0L)",
        "+ ",
        "      names(json)[rhs] <- map[lhs]",
        "+ ",
        "    }",
        "+ ",
        "  ",
        "+ ",
        "    # fix values",
        "+ ",
        "    if (is.character(json))",
        "+ ",
        "      return(map[[json]] %||% json)",
        "+ ",
        "  ",
        "+ ",
        "    # handle true, false, null",
        "+ ",
        "    if (is.name(json)) {",
        "+ ",
        "      text <- as.character(json)",
        "+ ",
        "      if (text == \"true\")",
        "+ ",
        "        return(TRUE)",
        "+ ",
        "      else if (text == \"false\")",
        "+ ",
        "        return(FALSE)",
        "+ ",
        "      else if (text == \"null\")",
        "+ ",
        "        return(NULL)",
        "+ ",
        "    }",
        "+ ",
        "  ",
        "+ ",
        "    # recurse",
        "+ ",
        "    if (is.recursive(json)) {",
        "+ ",
        "      for (i in seq_along(json)) {",
        "+ ",
        "        json[i] <- list(renv_json_read_remap(json[[i]], map))",
        "+ ",
        "      }",
        "+ ",
        "    }",
        "+ ",
        "  ",
        "+ ",
        "    json",
        "+ ",
        "  ",
        "+ ",
        "  }",
        "+ ",
        "",
        "+ ",
        "  # load the renv profile, if any",
        "+ ",
        "  renv_bootstrap_profile_load(project)",
        "+ ",
        "",
        "+ ",
        "  # construct path to library root",
        "+ ",
        "  root <- renv_bootstrap_library_root(project)",
        "+ ",
        "",
        "+ ",
        "  # construct library prefix for platform",
        "+ ",
        "  prefix <- renv_bootstrap_platform_prefix()",
        "+ ",
        "",
        "+ ",
        "  # construct full libpath",
        "+ ",
        "  libpath <- file.path(root, prefix)",
        "+ ",
        "",
        "+ ",
        "  # run bootstrap code",
        "+ ",
        "  renv_bootstrap_exec(project, libpath, version)",
        "+ ",
        "",
        "+ ",
        "  invisible()",
        "+ ",
        "",
        "+ ",
        "})",
        "- Project '~/math-378-final-project-laurenepettit' loaded. [renv 1.0.5]\n- The project is out-of-sync -- use `renv::status()` for details.\n",
        "> ",
        "renv::status()",
        "The following package(s) are used in this project, but are not installed:\n- DBI\n- dbplyr\n- duckdb\n- httr2\n- log4r\n- shiny\n\nSee ?renv::status() for advice on resolving these issues.\n",
        "> ",
        "?renv::status",
        "> ",
        "renv::load",
        "function (project = NULL, quiet = FALSE, profile = NULL) \n{\n    renv_scope_error_handler()\n    project <- renv_path_normalize(project %||% renv_project_find(project), \n        mustWork = TRUE)\n    if (!is.null(profile)) \n        renv_profile_set(profile)\n    action <- renv_load_action(project)\n    if (action[[1L]] == \"cancel\") {\n        cancel()\n    }\n    else if (action[[1L]] == \"init\") {\n        return(init(project))\n    }\n    else if (action[[1L]] == \"alt\") {\n        project <- action[[2L]]\n    }\n    renv_project_lock(project = project)\n",
        "    renv_scope_binding(the, \"load_running\", TRUE)\n    if (identical(getOption(\"renv.autoloader.running\"), TRUE)) \n        renv_project_clear()\n    switch <- !renv_metadata_embedded() && !is.null(the$project_path) && \n        !identical(project, the$project_path)\n    if (switch) \n        return(renv_load_switch(project))\n    if (quiet || renv_load_quiet()) \n        renv_scope_options(renv.verbose = FALSE)\n    renv_envvars_save()\n    if (renv_tests_running()) \n        return(renv_load_minimal(project))\n    renv_load_init(project)\n",
        "    renv_load_path(project)\n    renv_load_shims(project)\n    renv_load_renviron(project)\n    renv_load_profile(project)\n    renv_load_settings(project)\n    renv_load_project(project)\n    renv_load_sandbox(project)\n    renv_load_libpaths(project)\n    renv_load_rprofile(project)\n    renv_load_cache(project)\n    lockfile <- renv_lockfile_load(project)\n    if (length(lockfile)) {\n        renv_load_r(project, lockfile$R)\n        renv_load_python(project, lockfile$Python)\n        renv_load_bioconductor(project, lockfile$Bioconductor)\n",
        "    }\n    catch({\n        renv_infrastructure_write_rbuildignore(project)\n        renv_infrastructure_write_gitignore(project)\n    })\n    renv_load_finish(project, lockfile)\n    invisible(project)\n}\n<bytecode: 0x000002ce3c5d2c30>\n<environment: namespace:renv>\n",
        "> ",
        "renv::restore()",
        "- The library is already synchronized with the lockfile.\n",
        "> ",
        "renv::activate()",
        "\nRestarting R session...\n\n"
    ]
}